' DVG303 :: Objektorienterad design och programmering
' Laboration #2
' 860224 Jonas Sjöberg
' Högskolan i Gävle
' tel12jsg@student.hig.se

@startuml
' ____________________________________________________________________________
' ____ CONFIGURATION OPTIONS __________________________________________________
' debug flag creates a 'svek.dot' and 'svek.svg' file in ~/
!pragma svek_trace on

' package graphical style
skinparam packageStyle folder

' don't use symbols to indicate visibility
' skinparam classAttributeIconsize 0


' ____________________________________________________________________________
' ____ CLASS DEFINITIONS ______________________________________________________
package se.hig.oodp.lab.model {
    class Vertex2D {
        -x:double
        -y:double
        --
        +Vertex2D(x:double, y:double)
        ..
        +getX():double
        +getY():double
        +moveBy(dx:double, dy:double):Vertex2D
        +rotate(ref:Vertex2D, angle:double):Vertex2D
        +scale(ref:Vertex2D, x_factor:double, y_factor:double):Vertex2D
        +toString():String
    }

    package se.hig.oodp.lab.model.component {
        interface Movable {
            +moveBy(dx:double, dy:double)
        }

        interface Rotatable {
            +rotate(angle:double)
        }

        interface Scalable {
            +scale(xFactor:double, yFactor:double)
        }
    }

    package se.hig.oodp.lab.model.simplefigure {
        abstract class SimpleFigure {
            #position:Vertex2D
            --
            SimpleFigure(position:Vertex2D)
            ..
            +moveBy(dx:double, dy:double)
            +getPosition():Vertex2D
        }

        class Point {
            Point(position:Vertex2D)
            ..
            +toString():String
        }

        class Circle {
            -radius:double
            --
            +Circle(position:Vertex2D, radius:double)
            ..
            +scale(factor:double)
            +getRadius():double
            +toString():String
        }

        class Ellipse {
            -width:double
            -height:double
            --
            +Ellipse(position:Vertex2D, width:double, height:double)
            ..
            +scale(xFactor:double, yFactor:double)
            +rotate(angle:double)
            +getWidth():double
            +getHeight():double
            +toString():String
        }

        ' NOTES
        ' ~~~~~
        note left of SimpleFigure
        Simpler figure consists of just
        one single point, the center.
        end note
    }

    package se.hig.oodp.lab.model.figure {
        abstract class Figure {
            +DEFAULT_X_COORD:double
            +DEFAULT_Y_COORD:double
    '       #vertices:ArrayList<Vertex2D>
            --
            +Figure(center:Vertex2D)
            ..
            #addVerticesToList(newVertices:Vertex2D...)
            +rotate(angle:double)
            +scale(xFactor:double, yFactor:double)
            {abstract} +updateCenterPoint(xFactor:double, yFactor:double)
            +moveBy(dx:double, dy:double)
            +getCenter():Vertex2D
            +getVertex(n:int):Vertex2D
        }

        class Line {
            -v0:Vertex2D
            -v1:Vertex2D
            --
            +Line(v0:Vertex2D, v1:Vertex2D)
            ..
            -updateCenterPoint()
            +toString():String
        }

        class Triangle {
            -v0:Vertex2D
            -v1:Vertex2D
            -v2:Vertex2D
            -width:double
            -height:double
            --
            +Triangle(center:Vertex2D, width:double, height:double)
            +Triangle(v0:Vertex2D, v1:Vertex2D, v2:Vertex2D)
            ..
            -calculateVerticesFromCenter()
            +calculateCenterPoint(xFactor:double, yFactor:double)
            +toString():String
            +updateCenterPoint(xFactor:double, yFactor:double)
        }

        class Polygon {
            +Polygon(center:Vertex2D, vertices:Vertex2D...)
            ..
            +scale(Factor:double, yFactor:double)
            +toString():String
        }

        class Rectangle {
            -v0:Vertex2D
            -v1:Vertex2D
            -v3:Vertex2D
            -v3:Vertex2D
            -width:double
            -height:double
            --
            +Rectangle(center:Vertex2D, width:double, height:double)
            +Rectangle(v0:Vertex2D, v1:Vertex2D, v2:Vertex2D, v3:Vertex2D)
            ..
            -calculateVerticesFromCenter()
            -updateCenterPoint(xFactor:double, yFactor:double)
            -calculateWidth()
            -calculateHeight()
            +toString():String
        }

        class Square {
            -v0:Vertex2D
            -v1:Vertex2D
            -v3:Vertex2D
            -v3:Vertex2D
            -sideLength:double
            --
            +Square(center:Vertex2D, side:double)
            ..
            -updateCenterPoint()
            -calculateVerticesFromCenter()
            +toString():String
        }

        ' NOTES
        ' ~~~~~
        note left of Figure
        Figure consists of
        any number of points.
        end note
    }
}

package se.hig.oodp.lab.control {

    interface FigureHandler {
        +Figure(center:Vertex2D)
        +createCircle(x:double, y:double, r:double);
        +createEllipse(x:double, y:double, a:double, b:double);
        +createLine(x0:double , y0:double , x1:double , y1:double );
        +createPoint(x:double, y:double);
        +createRectangle(x:double, y:double, a:double, b:double);
        +createSquare(x:double, y:double, a:double, b:double);
        +createTriangle(vx0:double, vy0:double, vx1:double,
                        vy1:double, vx2:double, vy2:double);
        +removeAll();
    }

    interface FigureMover {
        +moveAll(dx:double, dy:double)
    }

    interface FigurePrinter {
        +printAll()
    }

    interface FigureRotor {
        +rotateAll(angle:double)
    }

    interface FigureScalor {
        +scaleAll(factor_x:double, factor_y:double)
    }

    package se.hig.oodp.lab.control.implementation {
        class FigureHandlerImpl {
            -allFigures:List<Figure>
            -movableFigures:List<Movable>
            -rotatableFigures:List<Rotatable>
            -scalableFigures:List<Scalable>
        }

        class FigureMoverImpl {
            -movableFigures:List<Movable>
            --
            FigureMoverImpl()
            FigureMoverImpl(movableFigures:ArrayList<Movable>)
            ..
            +moveAll(dx:double, dy:double)
        }

        class FigureRotorImpl {
            -rotatableFigures:List<Rotatable>
            --
            FigureRotorImpl()
            FigureRotorImpl(rotatableFigures:ArrayList<Rotatable>)
            ..
            +rotateAll(angle:double)
        }

        class FigureScalorImpl {
            -scalableFigures:List<Scalable>
            --
            FigureScalorImpl()
            FigureScalorImpl(scalableFigures:ArrayList<Scalable>)
            ..
            +scaleAll(factor_x:double, factor_y:double)
        }

        class FigurePrinterImpl {
            -figures:List<Figure>
            --
            FigurePrinterImpl(figures:ArrayList<Figure>)
            ..
            +printAll()
        }
    }
}


'' ____________________________________________________________________________
'' ____ PACKAGE HIERARCHY _____________________________________________________
''+-- figure
''+-- simplefigure
'
'
'' ____________________________________________________________________________
'' ____ RELATIONS BETWEEN CLASSES _____________________________________________
'' <|--      extension
'' *--       composition
'' o--       aggregation
'
'
'' COMPOSITION
'' ~~~~~~~~~~~
'Figure       "1" *-- "many" Vertex2D : contains
'SimpleFigure "1" *-- "1"    Vertex2D : contains
'
'
'' INHERITANCE
'' ~~~~~~~~~~~
'SimpleFigure <|-- Figure
'
'SimpleFigure <|-- Point
'SimpleFigure <|-- Circle
'SimpleFigure <|-- Ellipse
'
'Figure <|-- Line
'Figure <|-- Triangle
'Figure <|-- Polygon
'Figure <|-- Rectangle
'Figure <|-- Square


'' IMPLEMENT INTERFACES
'' ~~~~~~~~~~~~~~~~~~~~
'Movable <.. Figure
'Movable <.. SimpleFigure
'
'Rotatable <.. Figure
'
'Scalable <.. Figure
'Scalable <.. Circle
'Scalable <.. Ellipse



' BELOW GENERATED BY "plantuml-dependency-cli-1.4.0-jar-with-dependencies.jar"

Figure  --|> SimpleFigure
Point   --|> SimpleFigure
Circle  --|> SimpleFigure
Ellipse --|> SimpleFigure

Figure       ..|> Movable
SimpleFigure ..|> Movable

Figure  ..|> Rotatable
Ellipse ..|> Rotatable

Figure       ..|> Scalable
Circle       ..|> Scalable
Ellipse      ..|> Scalable

Line      --|> Figure
Polygon   --|> Figure
Rectangle --|> Figure
Square    --|> Figure
Triangle  --|> Figure

FigureHandlerImpl --|> FigureHandler
FigureMoverImpl   --|> FigureMover
FigurePrinterImpl --|> FigurePrinter
FigureRotorImpl   --|> FigureRotor
FigureScalorImpl  --|> FigureScalor

'Figure       ..> Vertex2D
'SimpleFigure ..> Vertex2D
'Line         ..> Vertex2D
'Rectangle    ..> Vertex2D
'Square       ..> Vertex2D
'Triangle     ..> Vertex2D
'Circle       ..> Vertex2D
'Ellipse      ..> Vertex2D
'Point        ..> Vertex2D
@enduml
